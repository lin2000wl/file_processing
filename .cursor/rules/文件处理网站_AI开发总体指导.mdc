---
description: 
globs: 
alwaysApply: true
---
# AI开发总体指导文档

## 🎯 文档目的

本文档是AI自动化开发的总体指导文档，用于：
1. **串联所有开发文档**：明确各文档的作用和使用时机
2. **指导开发决策**：在不同阶段应该参考哪些文档的哪些章节
3. **确保开发质量**：遵循RULE-DEV-001规则，保证文档同步
4. **提供决策框架**：为AI提供清晰的开发路径和判断标准

## 📚 文档体系概览

### 核心文档清单
```
.cursor/rules/
├── 文件处理网站_实施计划.mdc         # 📋 项目总体规划和架构设计
├── 文件处理网站_技术规范.mdc         # 🔧 技术实现详细规范
├── 文件处理网站_部署运维.mdc         # 🚀 部署和运维指南
├── 文件处理网站_开发指南.mdc         # 👨‍💻 开发环境和流程指南
├── 文件处理网站_开发进度跟踪.mdc     # 📊 进度跟踪和任务管理
└── 文件处理网站_AI开发总体指导.mdc  # 🤖 本文档：AI指导手册
```

### 文档关系图
```
实施计划 (总体设计)
    ↓
技术规范 (详细实现) ←→ 开发指南 (环境流程)
    ↓                     ↓
开发进度跟踪 (任务管理) ←→ AI总体指导 (决策框架)
    ↓
部署运维 (上线维护)
```

## 🚀 开发阶段指导

### 阶段0：项目启动和环境准备

#### 🎯 阶段目标
理解项目需求，准备开发环境，确认技术方案。

#### 📖 主要参考文档
| 文档 | 章节 | 用途 |
|------|------|------|
| `实施计划.mdc` | 第1-3章 | 理解项目目标、需求和技术架构 |
| `开发指南.mdc` | 第1章 | 搭建开发环境 |
| `开发进度跟踪.mdc` | 项目概览 | 了解整体进度规划 |

#### 🔧 关键决策点
1. **环境检查**：参考`开发指南.mdc`第1.1节，确认Python、Node.js、Redis、Docker环境
2. **GPU资源确认**：参考`实施计划.mdc`第9.1节，确认CUDA环境和GPU内存
3. **MonkeyOCR验证**：参考项目根目录的README.md，确认MonkeyOCR能正常运行

#### ✅ 阶段完成标准
- [ ] 开发环境搭建完成
- [ ] MonkeyOCR测试运行成功
- [ ] 项目需求理解清晰
- [ ] 技术方案确认无误

---

### 阶段1：基础架构搭建

#### 🎯 阶段目标
搭建项目基础架构，包括项目结构、基础配置、数据库连接和基础API框架。

#### 📖 主要参考文档
| 任务ID | 主要参考文档 | 具体章节 | 关键内容 |
|--------|-------------|----------|----------|
| ARCH-001 | `实施计划.mdc` | 第5章 | 文件结构设计 |
| ARCH-002 | `技术规范.mdc` | 第1章 | API接口规范 |
| ARCH-002 | `开发指南.mdc` | 第2.2.1节 | 后端启动配置 |
| ARCH-003 | `技术规范.mdc` | 第2.1-2.2节 | Redis数据结构和Python模型 |
| ARCH-004 | `技术规范.mdc` | 第3章 | 前端组件规范 |
| ARCH-004 | `开发指南.mdc` | 第2.2.2节 | 前端启动配置 |
| ARCH-005 | `开发指南.mdc` | 第1章 | 开发环境搭建 |
| ARCH-005 | `部署运维.mdc` | 第2.3.2节 | 开发环境Docker配置 |

#### 🔧 关键决策点
1. **项目结构创建**：严格按照`实施计划.mdc`第5.1节的目录结构创建
2. **API框架选择**：使用FastAPI，参考`技术规范.mdc`第1.1节的协议规范
3. **数据库设计**：使用Redis，按照`技术规范.mdc`第2.1节的数据结构设计
4. **前端框架配置**：使用Vue.js 3 + Element Plus，参考`技术规范.mdc`第3章

#### 🚨 注意事项
- **文档同步**：每完成一个任务，立即更新`开发进度跟踪.mdc`中对应任务的状态
- **代码规范**：严格遵循`开发指南.mdc`第3章的代码规范
- **测试验证**：每个模块完成后进行基础测试，确保功能正常

#### ✅ 阶段完成标准
参考`开发进度跟踪.mdc`第一阶段的验收标准：
- [ ] 所有服务能够正常启动
- [ ] 前后端能够正常通信
- [ ] 基础API接口可访问
- [ ] 开发环境配置完成
- [ ] 代码通过基础测试

---

### 阶段2：核心功能开发

#### 🎯 阶段目标
实现文件上传、存储、MonkeyOCR集成和任务调度等核心功能。

#### 📖 主要参考文档
| 任务ID | 主要参考文档 | 具体章节 | 关键内容 |
|--------|-------------|----------|----------|
| CORE-001 | `技术规范.mdc` | 第1.4节 | 文件操作API设计 |
| CORE-001 | `技术规范.mdc` | 第4.1节 | 文件上传安全规范 |
| CORE-002 | `always_applied_workspace_rules` | 第2-3章 | MonkeyOCR技术架构和模块设计 |
| CORE-002 | `实施计划.mdc` | 第3.2.3节 | 处理引擎集成方案 |
| CORE-003 | `技术规范.mdc` | 第5.1.1节 | Celery任务队列配置 |
| CORE-003 | `技术规范.mdc` | 第1.5节 | 任务管理API设计 |
| CORE-004 | `技术规范.mdc` | 第3.1.1节 | 文件上传组件规范 |
| CORE-004 | `开发指南.mdc` | 第3.2.3节 | Vue组件开发规范 |
| CORE-005 | `技术规范.mdc` | 第3.3节 | CSS/SCSS规范 |
| CORE-005 | `实施计划.mdc` | 第1.3节 | 技术要求和UI设计 |

#### 🔧 关键决策点
1. **文件存储策略**：参考`技术规范.mdc`第4.1节，实现安全的文件上传和存储
2. **MonkeyOCR集成方式**：
   - 参考`always_applied_workspace_rules`了解MonkeyOCR的核心架构
   - 使用现有的`parse.py`作为处理入口点
   - 集成`magic_pdf`模块的核心功能
3. **异步任务设计**：使用Celery实现异步处理，参考`技术规范.mdc`第5.1.1节
4. **前端组件架构**：使用Vue.js组合式API，参考`技术规范.mdc`第3章

#### 🚨 注意事项
- **MonkeyOCR集成**：重点关注现有项目的模型加载和处理流程
- **性能考虑**：大文件处理需要考虑内存使用和处理时间
- **错误处理**：完善的错误处理和日志记录
- **安全验证**：文件类型、大小验证，防止恶意上传

#### ✅ 阶段完成标准
参考`开发进度跟踪.mdc`第二阶段的验收标准：
- [ ] 文件上传功能完整可用
- [ ] MonkeyOCR处理功能正常
- [ ] 任务能够异步执行
- [ ] 前端界面友好易用
- [ ] 基础功能测试通过

---

### 阶段3：高级功能开发

#### 🎯 阶段目标
实现批量处理、进度跟踪、WebSocket通信、结果展示和下载等高级功能。

#### 📖 主要参考文档
| 任务ID | 主要参考文档 | 具体章节 | 关键内容 |
|--------|-------------|----------|----------|
| ADV-001 | `实施计划.mdc` | 第1.2节 | 批量处理需求分析 |
| ADV-001 | `开发指南.mdc` | 第6.1.1节 | 异步处理优化 |
| ADV-002 | `技术规范.mdc` | 第1.7节 | WebSocket接口设计 |
| ADV-002 | `技术规范.mdc` | 第5.1.2节 | 实时通信实现 |
| ADV-003 | `技术规范.mdc` | 第3.1.2节 | 任务管理组件设计 |
| ADV-003 | `开发指南.mdc` | 第4.2.2节 | 组件测试方法 |
| ADV-004 | `技术规范.mdc` | 第1.6节 | 结果获取API设计 |
| ADV-004 | `技术规范.mdc` | 第3.1.3节 | 结果展示模块设计 |
| ADV-005 | `技术规范.mdc` | 第1.3节 | 错误码定义和处理 |
| ADV-005 | `开发指南.mdc` | 第3.1.4节 | 错误处理最佳实践 |

#### 🔧 关键决策点
1. **批量处理策略**：设计合理的并发控制和资源管理
2. **WebSocket连接管理**：实现连接池和自动重连机制
3. **实时进度更新**：设计高效的进度推送机制
4. **结果文件管理**：实现安全的文件下载和自动清理

#### 🚨 注意事项
- **并发控制**：避免过多并发任务导致系统资源耗尽
- **连接稳定性**：WebSocket连接的断线重连和错误处理
- **用户体验**：实时反馈和友好的错误提示
- **资源清理**：及时清理临时文件和过期数据

#### ✅ 阶段完成标准
参考`开发进度跟踪.mdc`第三阶段的验收标准：
- [ ] 批量处理功能完整
- [ ] 实时进度跟踪正常
- [ ] 用户界面交互流畅
- [ ] 结果下载功能可用
- [ ] 错误处理机制完善

---

### 阶段4：优化部署

#### 🎯 阶段目标
进行性能优化、安全加固、Docker化部署和文档完善。

#### 📖 主要参考文档
| 任务ID | 主要参考文档 | 具体章节 | 关键内容 |
|--------|-------------|----------|----------|
| OPT-001 | `开发指南.mdc` | 第6章 | 性能优化策略 |
| OPT-001 | `技术规范.mdc` | 第5.2节 | 缓存策略设计 |
| OPT-002 | `技术规范.mdc` | 第4章 | 安全规范要求 |
| OPT-002 | `部署运维.mdc` | 第6章 | 安全加固措施 |
| OPT-003 | `部署运维.mdc` | 第2章 | Docker部署配置 |
| OPT-003 | `部署运维.mdc` | 第3章 | 部署脚本设计 |
| OPT-004 | `开发指南.mdc` | 第4章 | 测试指南和策略 |
| OPT-004 | `开发指南.mdc` | 第7.2节 | CI/CD自动化配置 |
| OPT-005 | `实施计划.mdc` | 第13章 | 成功标准和文档要求 |

#### 🔧 关键决策点
1. **性能瓶颈识别**：通过监控和测试识别性能瓶颈
2. **安全漏洞扫描**：使用工具扫描和修复安全漏洞
3. **部署环境选择**：根据实际需求选择部署方式
4. **监控告警配置**：设置合理的监控指标和告警阈值

#### 🚨 注意事项
- **生产环境差异**：确保开发和生产环境的一致性
- **数据备份策略**：重要数据的备份和恢复机制
- **监控覆盖**：全面的监控覆盖和日志收集
- **文档同步**：确保所有文档与最终实现保持一致

#### ✅ 阶段完成标准
参考`开发进度跟踪.mdc`第四阶段的验收标准：
- [ ] 系统性能达标
- [ ] 安全机制完善
- [ ] 部署流程顺畅
- [ ] 测试覆盖充分
- [ ] 文档完整准确

## 🤖 AI决策框架

### 开发过程中的关键决策点

#### 1. 技术选型决策
**决策时机**：开始实现具体功能时
**参考文档**：
- `实施计划.mdc`第2章技术架构
- `技术规范.mdc`相应章节
**决策原则**：
- 优先使用文档中明确规定的技术栈
- 如需变更，必须有充分理由并更新文档

#### 2. API设计决策
**决策时机**：实现API接口时
**参考文档**：
- `技术规范.mdc`第1章API接口规范
**决策原则**：
- 严格遵循RESTful设计原则
- 统一的错误码和响应格式
- 完整的输入验证和错误处理

#### 3. 数据模型设计决策
**决策时机**：设计数据存储结构时
**参考文档**：
- `技术规范.mdc`第2章数据模型设计
**决策原则**：
- 优先使用Redis作为主要存储
- 设计合理的数据过期策略
- 考虑数据一致性和性能

#### 4. 前端组件设计决策
**决策时机**：实现前端界面时
**参考文档**：
- `技术规范.mdc`第3章前端组件规范
- `开发指南.mdc`第3章代码规范
**决策原则**：
- 使用Vue.js 3组合式API
- 遵循Element Plus设计规范
- 响应式设计和用户体验优先

#### 5. 性能优化决策
**决策时机**：发现性能问题时
**参考文档**：
- `开发指南.mdc`第6章性能优化
- `技术规范.mdc`第5章性能规范
**决策原则**：
- 先定位瓶颈，再进行优化
- 平衡性能和资源消耗
- 监控优化效果

### 问题解决流程

#### 遇到技术问题时
1. **查阅相关文档**：根据问题类型查找对应文档章节
2. **分析问题原因**：结合代码和日志分析问题根源
3. **制定解决方案**：参考文档中的最佳实践
4. **实施和验证**：实施解决方案并进行测试验证
5. **更新文档**：如果涉及设计变更，及时更新相关文档

#### 遇到需求变更时
1. **评估影响范围**：分析变更对现有设计的影响
2. **更新设计文档**：先更新`实施计划.mdc`和`技术规范.mdc`
3. **调整开发计划**：更新`开发进度跟踪.mdc`中的任务安排
4. **实施变更**：按照更新后的文档进行开发
5. **验证和测试**：确保变更不影响现有功能

## 📋 开发检查清单

### 每日开发检查
- [ ] 今日任务是否按照`开发进度跟踪.mdc`执行
- [ ] 代码是否符合`开发指南.mdc`的规范要求
- [ ] 是否及时更新了进度跟踪文档
- [ ] 是否进行了必要的测试验证
- [ ] 是否记录了遇到的问题和解决方案

### 每阶段完成检查
- [ ] 所有任务是否达到验收标准
- [ ] 代码质量是否符合要求
- [ ] 文档是否同步更新
- [ ] 测试是否充分覆盖
- [ ] 是否准备好进入下一阶段

### 最终交付检查
- [ ] 所有功能是否正常工作
- [ ] 性能是否达到要求
- [ ] 安全措施是否到位
- [ ] 部署文档是否完整
- [ ] 用户文档是否清晰

## 🔄 RULE-DEV-001 遵循指南

### 文档同步要求
根据用户设定的RULE-DEV-001规则，AI必须严格遵循以下要求：

#### 1. 立项与评审
- **已完成**：实施计划已制定并获得确认
- **文档位置**：`文件处理网站_实施计划.mdc`

#### 2. 分步开发
- **执行要求**：严格按照`开发进度跟踪.mdc`中的任务分解进行开发
- **验收要求**：每完成一个模块，必须更新进度文档并等待用户验收
- **文档更新**：每个模块完成后立即更新对应的.mdc文件

#### 3. 文档同步（最重要）
- **更新频率**：每完成一个任务立即更新
- **更新内容**：模块功能说明、接口变更、示例用法、验证结果
- **文档位置**：`.cursor/rules/`目录下的所有.mdc文件
- **同步保证**：这是整个开发过程中最重要的要求，必须无条件保证

#### 4. 版本管理
- **分支策略**：每个模块对应一个feature分支
- **提交规范**：遵循`开发指南.mdc`第2.1节的Git工作流
- **合并要求**：文档、测试、代码均通过审查后才能合并

#### 5. 测试反馈
- **问题记录**：在`开发进度跟踪.mdc`中记录问题和解决方案
- **修复流程**：问题修复后更新相关文档和测试用例

### 文档更新优先级
1. **最高优先级**：`开发进度跟踪.mdc` - 任务状态和进度
2. **高优先级**：`技术规范.mdc` - 技术实现细节变更
3. **中优先级**：`开发指南.mdc` - 开发流程和规范更新
4. **中优先级**：`部署运维.mdc` - 部署配置变更
5. **低优先级**：`实施计划.mdc` - 重大架构变更时更新

## 🎯 成功标准

### 开发质量标准
- **功能完整性**：所有需求功能正常实现
- **代码质量**：通过所有代码规范检查
- **测试覆盖**：单元测试覆盖率≥80%
- **性能达标**：响应时间<2秒，并发支持>50用户
- **安全合规**：通过安全漏洞扫描

### 文档质量标准
- **内容完整**：所有模块都有对应文档
- **内容准确**：文档与实际实现一致
- **格式规范**：遵循Markdown格式规范
- **更新及时**：代码变更后立即更新文档
- **可读性强**：结构清晰，内容易懂

### 项目交付标准
- **功能验收**：用户验收测试通过
- **性能验收**：性能测试达到指标
- **安全验收**：安全测试无高危漏洞
- **文档验收**：文档完整且与实现一致
- **部署验收**：能够成功部署和运行

---

**文档版本**: v1.0  
**最后更新**: 2025年1月  
**维护者**: AI开发助手  
**审核者**: 项目负责人

## 📞 紧急联系和支持

如果在开发过程中遇到无法通过文档解决的问题：
1. 记录问题详情到`开发进度跟踪.mdc`
2. 暂停当前任务，避免错误扩散
3. 寻求用户指导和确认
4. 更新相关文档，避免类似问题重复出现
